\TODO/
> complete Installing the Adafruit BBIO Library offline tutorial
> complete pyOSC installation tutorial
> add section on creating a disk image of the SD card

TUTORIAL: Preparing an SD Card For Use with the Beaglebone Black

- this document explains how to install an operating system and some other important software on your Beaglebone Black
- our aim is to install the following essentials for combined audio + physical computing projects:

-- debian (operating system)
-- jack (for audio)
-- supercollider (programming language for audio synthesis)
-- adafruit BBIO library (python library for interfacing with the beaglebone pinouts)
-- pyOSC (python library for communicating via the Open Sound Control protocol)

- the first three of these will be covered together as one tutorial, whilst the latter two will be covered as separate guides
- NOTE: debian will be installed on the SD card from a PC...
- ...whilst the other software will be installed from the command line by booting the SD card in the beaglebone and logging in to it remotely via SSH
- NOTE: for more information on creating an image of your SD card for backup purposes, see the tutorial entitled "cloning-sd-cards.txt"

* Requirements

- You will need:
-- a laptop capable of running a unix terminal (i.e. mac/linux)
-- a beaglebone black
-- a 4GB SD card (minimum)
-- a micro to normal size SD card convertor (to insert the SD into your computer)
-- a simple USB sound card for your beaglebone (for audio testing)
-- an ethernet connection to your Beaglebone Black (ethernet cable, switch or wireless router) 
-- a working internet connection on the Beaglebone Black (see separate tutorial on internet access (LINK?!))

* Installing Debian, Jack and Supercollider

** Tutorial

- Installing Debian, Jack and Supercollider are the basic requirements for the Beaglebone to run audio
- Fredrik Olofsson has produced excellent tutorials on this, which we will not attempt to reproduce here
- There are two possible tutorials, as follows:
- 1. in depth: https://github.com/redFrik/udk10-Embedded_Systems/tree/master/udk131121
- 2. simplified: http://supercollider.github.io/development/building-beagleboneblack.html
- also, some discussion here: http://new-supercollider-mailing-lists-forums-use-these.2681727.n2.nabble.com/supercollider-on-Beaglebone-Black-td7599684.html

** Troubleshooting

- this section covers some things that can wrong during the above install process and how to solve them:

"cc1plus: error: unrecognized command line option '-std=c++11'" when building supercollider from source

- can occur when doing $ sudo make install
- newer kernels seem to include old version of g++, which cmake doesnâ€™t like
- solution is:
$ sudo apt-get install g++-4.7
$ cmake -L -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DSSE=OFF -DSSE2=OFF -DSUPERNOVA=OFF -DNOVA_SIMD=OFF -DSC_QT=OFF -DSC_WII=OFF -DSC_ED=OFF -DSC_IDE=OFF -DSC_EL=ON -DCMAKE_CXX_COMPILER=g++-4.7 -DSEQAN_C++11_STANDARD=ON ..

NOTE: Debian has the package under the name gcc-4.8 (or for the c++ compiler, g++-4.8)
NOTE: Installing those packages will not mess up your OS, as long as you do not rename it to g++.

* Installing the Adafruit BBIO Library

- the Adafruit BBIO Library is one of a number of libraries written to interface with the beaglebone pin headers
- for more info see:
https://github.com/adafruit/adafruit-beaglebone-io-python
- Other libraries include PyBBIO and Bonescript (on Angstrom, using node.js), see links below:
http://beagleboard.org/project/PyBBIO/
https://github.com/alexanderhiam/PyBBIO/wiki
http://beagleboard.org/project/bonescript/
- according to this, Adafruit is the best: http://petebachant.me/stepper-motor-control-with-the-beaglebone-black-and-python/

1. Installation

- these tutorial is (heavily) modified from the Angstrom or Ubuntu version found at:
https://learn.adafruit.com/setting-up-io-python-library-on-beaglebone-black/overview

a. Online Installation

- NOTE: requires internet connection, which you should have if you completed the debian, jack + supercollider installation above

- ssh into the beaglebone black
$ ssh debian@192.168.2.14
- make sure the beagle has the correct date and time
$ sudo ntpdate pool.ntp.org
- make sure your debian packages are up to date
$ sudo apt-get update
- install python-pip package and dependecies
$ sudo apt-get install build-essential python-dev python-pip -y
- cd to an appropriate folder to temporarily clone a git repo to e.g.
$ cd /home/debian
- clone the adafruit BBIO library to this location
$ git clone git://github.com/adafruit/adafruit-beaglebone-io-python.git
$ cd adafruit-beaglebone-io-python
$ sudo python setup.py install
- remove the cloned git repo
$ cd ..
$ sudo rm -rf adafruit-beaglebone-io-python

- for more details and to troubleshoot any problems see:
https://pypi.python.org/pypi/Adafruit_BBIO
https://github.com/adafruit/adafruit-beaglebone-io-python/issues/12

b. Offline Installation

\TODO/

- NOTE: this presumes that your beaglebone has the correct date and time, as conducted whilst installing Debian, Jack and Supercollider (see above)

2. Checking if the Adafruit BBIO library installed correctly

a. Quick Check

$ python -c "import Adafruit_BBIO.GPIO as GPIO; print GPIO"
- you should see this or similar
<module 'Adafruit_BBIO.GPIO' from '/usr/local/lib/python2.7/dist-packages/Adafruit_BBIO/GPIO.so'>

b. Real-World Test

- wire up a basic LED circuit, as here: http://learn.adafruit.com/blinking-an-led-with-beaglebone-black
- start the python interpreter
$ sudo python
- import bbio library
>>> import Adafruit_BBIO.GPIO as GPIO
- setup a pin as an output:
>>> GPIO.setup("P8_10", GPIO.OUT)
- turn LED On:
>>> GPIO.output("P8_10", GPIO.HIGH)
- turn LED Off:
>>> GPIO.output("P8_10", GPIO.LOW)
- exit python
>>> exit()

c. Further Tests

- comprehensive tutorial: https://learn.adafruit.com/setting-up-io-python-library-on-beaglebone-black/using-the-bbio-library
- a quicker overview: https://pypi.python.org/pypi/Adafruit_BBIO
- below is a selection from the many well written tutorials for the adafruit BBIO library:
http://learn.adafruit.com/blinking-an-led-with-beaglebone-black
http://learn.adafruit.com/connecting-a-push-button-to-beaglebone-black
http://learn.adafruit.com/measuring-temperature-with-a-beaglebone-black

d. Troubleshooting

PWM Not Working in Adafruit Library

- this is down to an issue in the kernel, ideally need to update to bone24 or higher
- fixed it by following instructions here to flash sd card wtih debian 7.1 + bone24 : http://elinux.org/BeagleBoardDebian
also useful: http://elinux.org/BeagleBone
- related links here:
https://github.com/adafruit/adafruit-beaglebone-io-python/issues/22
https://github.com/adafruit/adafruit-beaglebone-io-python/issues/23
https://github.com/adafruit/adafruit-beaglebone-io-python/issues/6
http://www.armhf.com/index.php/boards/beaglebone-black/
http://eewiki.net/display/linuxonarm/BeagleBone+Black

* Installing the Python pyOSC Library

** Optional Section

- NOTE: this section can be skipped if you already performed these commands in the Adafruit BBIO library installation (see above)

- ssh into the beaglebone black
$ ssh debian@192.168.2.14
- make sure the beagle has the correct date and time
$ sudo ntpdate pool.ntp.org
- make sure your debian packages are up to date
$ sudo apt-get update
- install python-pip package and dependecies
$ sudo apt-get install build-essential python-dev python-pip -y

** Required Section

- download an archive from here: https://trac.v2.nl/attachment/wiki/pyOSC/pyOSC-0.3.5b-5294.tar.gz
- copy the tar.gz file onto the beagleboard using scp
$ scp /path debian@192.168.2.14 :/home/Debian
- ssh in and untar the file
$ ssh debian@192.168.2.14
$ cd /home/debian
$ tar -xf pyOSC-0.3.5b-5294.tar.gz
- install pyosc
$ cd pyOSC-0.3.5b-5294
NOTE TO SELF: check the above line 
$ sudo python setup.py install
- remove the source code and zip
$ cd ..
$ rm -r pyOSC-0.3.5b-5294 
$ rm pyOSC-0.3.5b-5294.tar.gz

** Testing

\TODO/
